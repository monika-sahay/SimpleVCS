version: 2.1

jobs:
  test:
    docker:
      - image: circleci/python:3.9
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            pip install -r requirements.txt
            pip install pylint pytest
      - run:
          name: Run pylint
          command: |
            pylint simplevcs
      - run:
          name: Run pytest
          command: |
            pytest tests/

  build:
    docker:
      - image: circleci/python:3.9
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            pip install -r requirements.txt
      - run:
          name: Install development dependencies
          command: |
            pip install -r dev-requirements.txt
      - run:
          name: Build package
          command: python setup.py sdist bdist_wheel
      - run:
          name: Test command-line interface
          command: |
            if pip show simplevcs >/dev/null 2>&1; then
              echo "simplevcs is installed, uninstalling..."
              pip uninstall -y simplevcs
            else
              echo "simplevcs is not installed"
            fi
            pip install .
            SimpleVCS init /tmp/repo

  deploy:
    docker:
      - image: circleci/python:3.9
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            pip install -r requirements.txt
      - run:
          name: Install development dependencies
          command: |
            pip install -r dev-requirements.txt
      - run:
          name: Build package
          command: python setup.py sdist bdist_wheel
      - run:
          name: Install package
          command: pip install .
      - run:
          name: Deploy to TestPyPI
          command: python3 -m twine upload --repository-url https://test.pypi.org/legacy/ dist/* --username __token__ --password $TEST_PYPI_TOKEN
          # environment:
          #   TEST_PYPI_TOKEN: ${{TEST_PYPI_TOKEN}}
      # - run:
      #     name: Deploy to PyPI
      #     command: python3 -m twine upload dist/* --username __token__ --password $PYPI_TOKEN
      #     environment:
      #       PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - test
      - build:
          requires:
            - build
          filters:
            branches:
              only: main
      - deploy:
          requires:
            - build